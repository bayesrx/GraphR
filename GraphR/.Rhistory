compileAttributes()
install()
compileAttributes()
install()
compileAttributes()
install()
compileAttributes()
install()
compileAttributes()
install()
install.packages("Rcpp")
install.packages("Rcpp")
install()
library(devtools)
install.packages(c("babelgene", "backports", "BDgraph", "bdsmatrix", "BH", "BiocManager", "blob", "bookdown", "brew", "brio", "broom", "bslib", "callr", "car", "caret", "checkmate", "classInt", "cli", "clipr", "clue", "collapse", "colorspace", "commonmark", "conquer", "cpp11", "crayon", "credentials", "curl", "data.table", "DBI", "dbplyr", "dendextend", "desc", "deSolve", "devtools", "diffobj", "digest", "doParallel", "DT", "dtplyr", "e1071", "ellipse", "evaluate", "exactRankTests", "FactoMineR", "fansi", "farver", "FNN", "fontawesome", "forcats", "foreach", "formatR", "fs", "future", "future.apply", "gargle", "gert", "ggforce", "ggplot2", "ggraph", "ggridges", "ggsignif", "ggtext", "gh", "GIGrvg", "gitcreds", "glmnet", "globals", "glue", "googlesheets4", "gplots", "graphlayouts", "gRbase", "gridtext", "gtable", "gtools", "hardhat", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "httpuv", "httr", "ica", "igraph", "ipred", "irlba", "isoband", "iterators", "jsonlite", "km.ci", "knitr", "latticeExtra", "lava", "leiden", "lme4", "locfit", "lqr", "magrittr", "maps", "maptools", "markdown", "matrixcalc", "MatrixModels", "matrixStats", "mclust", "memoise", "mime", "minqa", "mnormt", "modelr", "MomTrunc", "msigdbr", "mvtnorm", "nloptr", "openssl", "parallelly", "patchwork", "pkgbuild", "pkgload", "plm", "polyclip", "polynom", "pracma", "processx", "progressr", "proxy", "ps", "psych", "purrr", "quantreg", "R.methodsS3", "R.oo", "R.utils", "rbibutils", "rcmdcheck", "RColorBrewer", "RcppAnnoy", "RcppArmadillo", "RcppEigen", "RCurl", "Rdpack", "readr", "readxl", "recipes", "remotes", "reprex", "reticulate", "rjson", "rlang", "rmarkdown", "roxygen2", "rprojroot", "RSQLite", "rstudioapi", "rversions", "rvest", "s2", "sandwich", "sass", "scales", "scatterplot3d", "sctransform", "sessioninfo", "Seurat", "SeuratObject", "sf", "shiny", "sp", "spatstat.core", "spatstat.data", "spatstat.geom", "spatstat.sparse", "spatstat.utils", "stringi", "survMisc", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyselect", "tidyverse", "timeDate", "tinytex", "tree", "tweenr", "tzdb", "units", "usethis", "utf8", "uuid", "uwot", "vctrs", "viridis", "viridisLite", "vroom", "waldo", "wk", "xfun", "XML", "xml2", "yaml", "zip", "zoo"))
install.packages(c("babelgene", "backports", "BDgraph", "bdsmatrix", "BH", "BiocManager", "blob", "bookdown", "brew", "brio", "broom", "bslib", "callr", "car", "caret", "checkmate", "classInt", "cli", "clipr", "clue", "collapse", "colorspace", "commonmark", "conquer", "cpp11", "crayon", "credentials", "curl", "data.table", "DBI", "dbplyr", "dendextend", "desc", "deSolve", "devtools", "diffobj", "digest", "doParallel", "DT", "dtplyr", "e1071", "ellipse", "evaluate", "exactRankTests", "FactoMineR", "fansi", "farver", "FNN", "fontawesome", "forcats", "foreach", "formatR", "fs", "future", "future.apply", "gargle", "gert", "ggforce", "ggplot2", "ggraph", "ggridges", "ggsignif", "ggtext", "gh", "GIGrvg", "gitcreds", "glmnet", "globals", "glue", "googlesheets4", "gplots", "graphlayouts", "gRbase", "gridtext", "gtable", "gtools", "hardhat", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "httpuv", "httr", "ica", "igraph", "ipred", "irlba", "isoband", "iterators", "jsonlite", "km.ci", "knitr", "latticeExtra", "lava", "leiden", "lme4", "locfit", "lqr", "magrittr", "maps", "maptools", "markdown", "matrixcalc", "MatrixModels", "matrixStats", "mclust", "memoise", "mime", "minqa", "mnormt", "modelr", "MomTrunc", "msigdbr", "mvtnorm", "nloptr", "openssl", "parallelly", "patchwork", "pkgbuild", "pkgload", "plm", "polyclip", "polynom", "pracma", "processx", "progressr", "proxy", "ps", "psych", "purrr", "quantreg", "R.methodsS3", "R.oo", "R.utils", "rbibutils", "rcmdcheck", "RColorBrewer", "RcppAnnoy", "RcppArmadillo", "RcppEigen", "RCurl", "Rdpack", "readr", "readxl", "recipes", "remotes", "reprex", "reticulate", "rjson", "rlang", "rmarkdown", "roxygen2", "rprojroot", "RSQLite", "rstudioapi", "rversions", "rvest", "s2", "sandwich", "sass", "scales", "scatterplot3d", "sctransform", "sessioninfo", "Seurat", "SeuratObject", "sf", "shiny", "sp", "spatstat.core", "spatstat.data", "spatstat.geom", "spatstat.sparse", "spatstat.utils", "stringi", "survMisc", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyselect", "tidyverse", "timeDate", "tinytex", "tree", "tweenr", "tzdb", "units", "usethis", "utf8", "uuid", "uwot", "vctrs", "viridis", "viridisLite", "vroom", "waldo", "wk", "xfun", "XML", "xml2", "yaml", "zip", "zoo"))
install.packages(c("babelgene", "backports", "BDgraph", "bdsmatrix", "BH", "BiocManager", "blob", "bookdown", "brew", "brio", "broom", "bslib", "callr", "car", "caret", "checkmate", "classInt", "cli", "clipr", "clue", "collapse", "colorspace", "commonmark", "conquer", "cpp11", "crayon", "credentials", "curl", "data.table", "DBI", "dbplyr", "dendextend", "desc", "deSolve", "devtools", "diffobj", "digest", "doParallel", "DT", "dtplyr", "e1071", "ellipse", "evaluate", "exactRankTests", "FactoMineR", "fansi", "farver", "FNN", "fontawesome", "forcats", "foreach", "formatR", "fs", "future", "future.apply", "gargle", "gert", "ggforce", "ggplot2", "ggraph", "ggridges", "ggsignif", "ggtext", "gh", "GIGrvg", "gitcreds", "glmnet", "globals", "glue", "googlesheets4", "gplots", "graphlayouts", "gRbase", "gridtext", "gtable", "gtools", "hardhat", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "httpuv", "httr", "ica", "igraph", "ipred", "irlba", "isoband", "iterators", "jsonlite", "km.ci", "knitr", "latticeExtra", "lava", "leiden", "lme4", "locfit", "lqr", "magrittr", "maps", "maptools", "markdown", "matrixcalc", "MatrixModels", "matrixStats", "mclust", "memoise", "mime", "minqa", "mnormt", "modelr", "MomTrunc", "msigdbr", "mvtnorm", "nloptr", "openssl", "parallelly", "patchwork", "pkgbuild", "pkgload", "plm", "polyclip", "polynom", "pracma", "processx", "progressr", "proxy", "ps", "psych", "purrr", "quantreg", "R.methodsS3", "R.oo", "R.utils", "rbibutils", "rcmdcheck", "RColorBrewer", "RcppAnnoy", "RcppArmadillo", "RcppEigen", "RCurl", "Rdpack", "readr", "readxl", "recipes", "remotes", "reprex", "reticulate", "rjson", "rlang", "rmarkdown", "roxygen2", "rprojroot", "RSQLite", "rstudioapi", "rversions", "rvest", "s2", "sandwich", "sass", "scales", "scatterplot3d", "sctransform", "sessioninfo", "Seurat", "SeuratObject", "sf", "shiny", "sp", "spatstat.core", "spatstat.data", "spatstat.geom", "spatstat.sparse", "spatstat.utils", "stringi", "survMisc", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyselect", "tidyverse", "timeDate", "tinytex", "tree", "tweenr", "tzdb", "units", "usethis", "utf8", "uuid", "uwot", "vctrs", "viridis", "viridisLite", "vroom", "waldo", "wk", "xfun", "XML", "xml2", "yaml", "zip", "zoo"))
install.packages(c("babelgene", "backports", "BDgraph", "bdsmatrix", "BH", "BiocManager", "blob", "bookdown", "brew", "brio", "broom", "bslib", "callr", "car", "caret", "checkmate", "classInt", "cli", "clipr", "clue", "collapse", "colorspace", "commonmark", "conquer", "cpp11", "crayon", "credentials", "curl", "data.table", "DBI", "dbplyr", "dendextend", "desc", "deSolve", "devtools", "diffobj", "digest", "doParallel", "DT", "dtplyr", "e1071", "ellipse", "evaluate", "exactRankTests", "FactoMineR", "fansi", "farver", "FNN", "fontawesome", "forcats", "foreach", "formatR", "fs", "future", "future.apply", "gargle", "gert", "ggforce", "ggplot2", "ggraph", "ggridges", "ggsignif", "ggtext", "gh", "GIGrvg", "gitcreds", "glmnet", "globals", "glue", "googlesheets4", "gplots", "graphlayouts", "gRbase", "gridtext", "gtable", "gtools", "hardhat", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "httpuv", "httr", "ica", "igraph", "ipred", "irlba", "isoband", "iterators", "jsonlite", "km.ci", "knitr", "latticeExtra", "lava", "leiden", "lme4", "locfit", "lqr", "magrittr", "maps", "maptools", "markdown", "matrixcalc", "MatrixModels", "matrixStats", "mclust", "memoise", "mime", "minqa", "mnormt", "modelr", "MomTrunc", "msigdbr", "mvtnorm", "nloptr", "openssl", "parallelly", "patchwork", "pkgbuild", "pkgload", "plm", "polyclip", "polynom", "pracma", "processx", "progressr", "proxy", "ps", "psych", "purrr", "quantreg", "R.methodsS3", "R.oo", "R.utils", "rbibutils", "rcmdcheck", "RColorBrewer", "RcppAnnoy", "RcppArmadillo", "RcppEigen", "RCurl", "Rdpack", "readr", "readxl", "recipes", "remotes", "reprex", "reticulate", "rjson", "rlang", "rmarkdown", "roxygen2", "rprojroot", "RSQLite", "rstudioapi", "rversions", "rvest", "s2", "sandwich", "sass", "scales", "scatterplot3d", "sctransform", "sessioninfo", "Seurat", "SeuratObject", "sf", "shiny", "sp", "spatstat.core", "spatstat.data", "spatstat.geom", "spatstat.sparse", "spatstat.utils", "stringi", "survMisc", "sys", "testthat", "tibble", "tidygraph", "tidyr", "tidyselect", "tidyverse", "timeDate", "tinytex", "tree", "tweenr", "tzdb", "units", "usethis", "utf8", "uuid", "uwot", "vctrs", "viridis", "viridisLite", "vroom", "waldo", "wk", "xfun", "XML", "xml2", "yaml", "zip", "zoo"))
compileAttributes()
library(devtools)
compileAttributes()
library(Rcpp)
compileAttributes()
install()
compileAttributes()
install()
library(devtools)
devtools::install()
setwd("C:/Users/chenliy/Desktop/PhD/porject I code/application2_spatial")
source("compile.R")
library(Matrix)
library(MASS)
library(matrixcalc)
library(dplyr)
library(car)
library(reshape2)
library(dplyr)
library(ComplexHeatmap)
library(circlize)
library(igraph)
library(ggraph)
library(graphlayouts)
library(RColorBrewer)
library("viridis")
library(wesanderson)
#install.packages("ggsci")
library(ggsci)
library(reshape2)
library(readxl)
library(ggpubr)
set.seed(20220830)
source("compile.R")
library(Matrix)
library(MASS)
library(matrixcalc)
library(dplyr)
library(car)
library(reshape2)
library(dplyr)
library(ComplexHeatmap)
library(circlize)
library(igraph)
library(ggraph)
library(graphlayouts)
library(RColorBrewer)
library("viridis")
library(wesanderson)
#install.packages("ggsci")
library(ggsci)
library(reshape2)
library(readxl)
library(ggpubr)
library(installr)
updateR()
install.packages("installr")
library(installr)
updateR()
set.seed(20220830)
source("compile.R")
setwd("C:/Users/chenliy/Desktop/PhD/porject I code/application2_spatial")
source("compile.R")
install.packages("ghyp")
source("compile.R")
source("compile.R")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("RcppArmadillo")
source("compile.R")
install.packages("Rtools")
install.packages(devtools)
install.packages("devtools")
install.packages("rtool")
source("compile.R")
library(Matrix)
library(MASS)
library(matrixcalc)
library(dplyr)
library(car)
library(reshape2)
library(dplyr)
library(ComplexHeatmap)
library(circlize)
library(igraph)
library(ggraph)
library(graphlayouts)
library(RColorBrewer)
library("viridis")
library(wesanderson)
#install.packages("ggsci")
library(ggsci)
library(reshape2)
library(readxl)
library(ggpubr)
load("C:/Users/chenliy/Desktop/PhD/porject I code/application2_spatial/scale_res.rdata")
######## Get network for all points
abs_max_fcn <- function(x) {
return(x[which(abs(x) == max(abs(x)))])
}
abs_min_fcn <- function(x) {
return(x[which(abs(x) == min(abs(x)))])
}
########
cor_phi_list <- data.frame()
ind <- 1
for (ind in 1:nrow(coord)){
dim1 <- dim(beta_list)[1]
coord_this <- coord[ind,(4:5)] %>%
as.matrix()
cor_list <- matrix(0,nrow = dim1,ncol = dim1)
x_beta_list <- array(0,c(dim1,dim1,length(coord_this)))
for (i in 1:length(coord_this)){
cor_list = cor_list + coord_this[i] * beta_list[,,i]
x_beta_list[,,i] <- coord_this[i] * beta_list[,,i]
}
####### phi
x_beta_list_sq <- x_beta_list^2
x_beta_list_sum <- x_beta_list_sq[,,1] + x_beta_list_sq[,,2]
x_beta_list_pro <- x_beta_list_sq
x_beta_list_pro[,,1] <- x_beta_list_pro[,,1] / x_beta_list_sum
x_beta_list_pro[,,2] <- x_beta_list_pro[,,2] / x_beta_list_sum
node_phi_list <- x_beta_list_pro[,,1] * phi_list[,,1] +
x_beta_list_pro[,,2] * phi_list[,,2]
node_phi_list <- melt(node_phi_list) %>%
filter(Var1 != Var2) %>%
mutate(ind_max = pmax(Var1,Var2),
ind_min = pmin(Var1,Var2)) %>%
select(ind_max, ind_min, value) %>%
group_by(ind_max, ind_min) %>%
summarise(phi_min = min(value),
phi_max = max(value),
.groups = "drop")
####### correlation
cor_list <- apply(cor_list,2, function(x) -x/lambda_vec)
cor_list <- melt(cor_list)
cor_list <- cor_list %>% mutate(ind_max = pmax(Var1, Var2),
ind_min = pmin(Var1, Var2)) %>%
select(ind_max,ind_min,value) %>%
filter(ind_max != ind_min) %>%
group_by(ind_max,ind_min) %>%
summarise(cor_max = abs_max_fcn(value),
cor_min = abs_min_fcn(value),
.groups = "drop")
cor_phi <- merge(node_phi_list,cor_list)
cor_phi <- mutate(cor_phi, x_scale = coord_this[1],
y_scale = coord_this[2])
cor_phi_list <- rbind(cor_phi_list,cor_phi)
}
cor_phi_list <- mutate(cor_phi_list, q = 1-phi_min) %>%
arrange(q) %>%
mutate(cum = cummean(q))
cutoff <- cor_phi_list %>% filter(cum < 0.01) %>%
select(phi_min) %>%
unlist() %>% min
# write.csv(cor_phi_list, "location_scale_res_all.csv")
cor_phi_list$cor_max <- ifelse(cor_phi_list$cor_max > 1,1,cor_phi_list$cor_max)
cor_phi_list$cor_max <- ifelse(cor_phi_list$cor_max < -1,-1,cor_phi_list$cor_max)
####################
ggplot(coord, aes(x=x,y=y,color = cluster)) +
geom_point()
#############################################
#######################################
origin <- read.csv("C:/Users/chenliy/Desktop/PhD/porject I code/application2_spatial/ST_breast_cancer_data/Gene_expression_BC_BGR_VB.csv")
origin <- origin$X %>% unlist
#which(origin == "VIM")
######## network for each cluster
cor_phi_list <- merge(cor_phi_list, coord)
cor_phi_list <- mutate(cor_phi_list, w_cor_max = phi_min * cor_max * (cum < 0.01))
cor_phi_list2 <- cor_phi_list %>% group_by(cluster, ind_min, ind_max) %>%
summarise(cor_max = mean(w_cor_max),
n = n(),
.groups = "drop") %>%
filter(cor_max != 0)
cor_phi_degree1 <- cor_phi_list2 %>% group_by(cluster, ind_min) %>%
summarise(degree1 = sum(abs(cor_max)),
.groups = "drop")
cor_phi_degree2 <- cor_phi_list2 %>% group_by(cluster, ind_max) %>%
summarise(degree2 = sum(abs(cor_max)),
.groups = "drop")
colnames(cor_phi_degree1)[2] = colnames(cor_phi_degree2)[2] = "ind"
cor_phi_degree <- full_join(cor_phi_degree1, cor_phi_degree2)
cor_phi_degree[is.na(cor_phi_degree)] <- 0
cor_phi_degree <- mutate(cor_phi_degree, degree = degree1 + degree2)
c1_sele <- filter(cor_phi_degree, cluster == "c1") %>% top_n(5, degree)
c2_sele <- filter(cor_phi_degree, cluster == "c2") %>% top_n(5, degree)
c3_sele <- filter(cor_phi_degree, cluster == "c3") %>% top_n(5, degree)
c1_sele <- filter(cor_phi_list2, cluster == "c1") %>%
filter(ind_max %in% c1_sele$ind |
ind_min %in% c1_sele$ind)
c2_sele <- filter(cor_phi_list2, cluster == "c2") %>%
filter(ind_max %in% c2_sele$ind |
ind_min %in% c2_sele$ind)
c3_sele <- filter(cor_phi_list2, cluster == "c3") %>%
filter(ind_max %in% c3_sele$ind |
ind_min %in% c3_sele$ind)
##### network
cluster1 <- mutate(c1_sele,
name_max = origin[c1_sele$ind_max],
name_min = origin[c1_sele$ind_min])
# create a vertices data.frame. One line per object of our hierarchy
cluster1 <- cluster1[,c("name_max","name_min","cor_max")]
colnames(cluster1) <- c("from","to","c1_cor")
cluster1 <- filter(cluster1, c1_cor != 0)
###### recalculate the summation
tmp1 <- cluster1 %>% group_by(from) %>%
summarise(sum_from = sum(abs(c1_cor)))
tmp2 <- cluster1 %>% group_by(to) %>%
summarise(sum_to = sum(abs(c1_cor)))
colnames(tmp1)[1] = colnames(tmp2)[1] <- "name"
summation_c1 <- full_join(tmp1, tmp2)
summation_c1[is.na(summation_c1)] <- 0
summation_c1 <- mutate(summation_c1, summation = sum_from+sum_to) %>%
select(name, summation)
####### vertices
gn_c1 <- unique(c(cluster1$from,
cluster1$to))
vertices_c1  <-  data.frame(
name = gn_c1 ,
id = 1:length(gn_c1)
)
######## merge vertices and summation
vertices_c1 <- full_join(vertices_c1, summation_c1)
vertices_c1 <- mutate(vertices_c1, type = "c1")
######### graph
g <- graph_from_data_frame(cluster1, directed=FALSE, vertices=vertices_c1)
node_range_c1 = c(min(vertices_c1$summation),
max(vertices_c1$summation))
edge_abs_range_c1 = c(min(abs(cluster1$c1_cor)),
max(abs(cluster1$c1_cor)))
node_size_c1 <- vertices_c1$summation
p3 <- ggraph(g, layout = "circle") +
#geom_edge_link() +
geom_edge_arc(aes(color = factor(sign(c1_cor),
levels = c(1,-1)),
width = abs(c1_cor)),
strength = 0.2,
alpha = 0.8)+
scale_edge_width(name = "Magnitude",
breaks = c(0.2,0.4,0.6,0.8),
range = 2.5*edge_abs_range_c1)+
scale_edge_color_discrete(name = "Sign", labels = c("Positive", "Negative")) +
#geom_edge_link(aes(edge_width = width,color = as.factor(sign)))+
geom_node_point(aes(size=node_size_c1),color = "darkgrey") +
scale_size(name = "Sum of Magnitudes",
breaks = c(0.5,1,1.5,2),
range = 3.5*node_range_c1) +
theme_void() +
#guides(size = "none")+
#theme(legend.position = "none") +
#ggtitle("c1-like") +
#theme(plot.title = element_text(face = "bold",size = 25,hjust = 0.5)) +
coord_fixed() +
geom_node_text(aes(label=name,
x = x * 1.05, y = y* 1.05,
angle = ifelse(atan(-(x/y))*(180/pi) < 0,
90 + atan(-(x/y))*(180/pi),
270 + atan(-x/y)*(180/pi)),
hjust = ifelse(x > 0, 0 ,1)),
size=2.5, alpha=10, fontface = "bold")+
expand_limits(x = c(-1.5, 1.5), y = c(-1.5, 1.5))+
guides(size = guide_legend(order = 1))+
#edge_width = guide_legend(order = 2),
#edge_color = guide_legend(order = 3)) +
theme(
#legend.title = element_text(size=4,face = "bold"),
legend.title=element_blank(),
legend.text = element_text(size = 5),
legend.position = "bottom",
legend.box="vertical",
legend.margin = margin(0, 0, -0.5, -0.5),
legend.spacing.x = unit(0, "mm"),
legend.spacing.y = unit(0, "mm"))
p3
pdf(file = "location_c1.pdf",   # The directory you want to save the file in
width = 2.5, # The width of the plot in inches
height = 2.5) # The height of the plot in inches
p3
dev.off()
######
##### network
cluster2 <- mutate(c2_sele,
name_max = origin[c2_sele$ind_max],
name_min = origin[c2_sele$ind_min])
# create a vertices data.frame. One line per object of our hierarchy
cluster2 <- cluster2[,c("name_max","name_min","cor_max")]
colnames(cluster2) <- c("from","to","c2_cor")
cluster2 <- filter(cluster2, c2_cor != 0)
###### recalculate the summation
tmp1 <- cluster2 %>% group_by(from) %>%
summarise(sum_from = sum(abs(c2_cor)))
tmp2 <- cluster2 %>% group_by(to) %>%
summarise(sum_to = sum(abs(c2_cor)))
colnames(tmp1)[1] = colnames(tmp2)[1] <- "name"
summation_c2 <- full_join(tmp1, tmp2)
summation_c2[is.na(summation_c2)] <- 0
summation_c2 <- mutate(summation_c2, summation = sum_from+sum_to) %>%
select(name, summation)
####### vertices
gn_c2 <- unique(c(cluster2$from,
cluster2$to))
vertices_c2  <-  data.frame(
name = gn_c2 ,
id = 1:length(gn_c2)
)
######## merge vertices and summation
vertices_c2 <- full_join(vertices_c2, summation_c2)
vertices_c2 <- mutate(vertices_c2, type = "c2")
######### graph
g <- graph_from_data_frame(cluster2, directed=FALSE, vertices=vertices_c2)
node_range_c2 = c(min(vertices_c2$summation),
max(vertices_c2$summation))
edge_abs_range_c2 = c(min(abs(cluster2$c2_cor)),
max(abs(cluster2$c2_cor)))
node_size_c2 <- vertices_c2$summation
p3 <- ggraph(g, layout = "circle") +
#geom_edge_link() +
geom_edge_arc(aes(color = factor(sign(c2_cor),
levels = c(1,-1)),
width = abs(c2_cor)),
strength = 0.2,
alpha = 0.8)+
scale_edge_width(name = "Magnitude",
breaks = c(0.2,0.4,0.6,0.8),
range = 2.5*edge_abs_range_c2)+
scale_edge_color_discrete(name = "Sign", labels = c("Positive", "Negative")) +
#geom_edge_link(aes(edge_width = width,color = as.factor(sign)))+
geom_node_point(aes(size=node_size_c2),color = "darkgrey") +
scale_size(name = "Sum of Magnitudes",
breaks = c(0.5,1,1.5,2),
range = 3.5*node_range_c2) +
theme_void() +
#guides(size = "none")+
#theme(legend.position = "none") +
#ggtitle("c2-like") +
#theme(plot.title = element_text(face = "bold",size = 25,hjust = 0.5)) +
coord_fixed() +
geom_node_text(aes(label=name,
x = x * 1.05, y = y* 1.05,
angle = ifelse(atan(-(x/y))*(180/pi) < 0,
90 + atan(-(x/y))*(180/pi),
270 + atan(-x/y)*(180/pi)),
hjust = ifelse(x > 0, 0 ,1)),
size=2.5, alpha=10, fontface = "bold")+
expand_limits(x = c(-1.5, 1.5), y = c(-1.5, 1.5))+
guides(size = guide_legend(order = 1))+
#edge_width = guide_legend(order = 2),
#edge_color = guide_legend(order = 3)) +
theme(
#legend.title = element_text(size=4,face = "bold"),
legend.title=element_blank(),
legend.text = element_text(size = 5),
legend.position = "bottom",
legend.box="vertical",
legend.margin = margin(0, 0, -0.5, -0.5),
legend.spacing.x = unit(0, "mm"),
legend.spacing.y = unit(0, "mm"))
p3
pdf(file = "location_c2.pdf",   # The directory you want to save the file in
width = 2.5, # The width of the plot in inches
height = 2.5) # The height of the plot in inches
p3
dev.off()
######
##### network
cluster3 <- mutate(c3_sele,
name_max = origin[c3_sele$ind_max],
name_min = origin[c3_sele$ind_min])
# create a vertices data.frame. One line per object of our hierarchy
cluster3 <- cluster3[,c("name_max","name_min","cor_max")]
colnames(cluster3) <- c("from","to","c3_cor")
cluster3 <- filter(cluster3, c3_cor != 0)
###### recalculate the summation
tmp1 <- cluster3 %>% group_by(from) %>%
summarise(sum_from = sum(abs(c3_cor)))
tmp2 <- cluster3 %>% group_by(to) %>%
summarise(sum_to = sum(abs(c3_cor)))
colnames(tmp1)[1] = colnames(tmp2)[1] <- "name"
summation_c3 <- full_join(tmp1, tmp2)
summation_c3[is.na(summation_c3)] <- 0
summation_c3 <- mutate(summation_c3, summation = sum_from+sum_to) %>%
select(name, summation)
####### vertices
gn_c3 <- unique(c(cluster3$from,
cluster3$to))
vertices_c3  <-  data.frame(
name = gn_c3 ,
id = 1:length(gn_c3)
)
######## merge vertices and summation
vertices_c3 <- full_join(vertices_c3, summation_c3)
vertices_c3 <- mutate(vertices_c3, type = "c3")
######### graph
g <- graph_from_data_frame(cluster3, directed=FALSE, vertices=vertices_c3)
node_range_c3 = c(min(vertices_c3$summation),
max(vertices_c3$summation))
edge_abs_range_c3 = c(min(abs(cluster3$c3_cor)),
max(abs(cluster3$c3_cor)))
node_size_c3 <- vertices_c3$summation
p3 <- ggraph(g, layout = "circle") +
#geom_edge_link() +
geom_edge_arc(aes(color = factor(sign(c3_cor),
levels = c(1,-1)),
width = abs(c3_cor)),
strength = 0.2,
alpha = 0.8)+
scale_edge_width(name = "Magnitude",
breaks = c(0.2,0.4,0.6,0.8),
range = 2.5*edge_abs_range_c3)+
scale_edge_color_discrete(name = "Sign", labels = c("Positive", "Negative")) +
#geom_edge_link(aes(edge_width = width,color = as.factor(sign)))+
geom_node_point(aes(size=node_size_c3),color = "darkgrey") +
scale_size(name = "Sum of Magnitudes",
breaks = c(0.5,1,1.5,2),
range = 3.5*node_range_c3) +
theme_void() +
#guides(size = "none")+
#theme(legend.position = "none") +
#ggtitle("c3-like") +
#theme(plot.title = element_text(face = "bold",size = 25,hjust = 0.5)) +
coord_fixed() +
geom_node_text(aes(label=name,
x = x * 1.05, y = y* 1.05,
angle = ifelse(atan(-(x/y))*(180/pi) < 0,
90 + atan(-(x/y))*(180/pi),
270 + atan(-x/y)*(180/pi)),
hjust = ifelse(x > 0, 0 ,1)),
size=2.5, alpha=10, fontface = "bold")+
expand_limits(x = c(-1.5, 1.5), y = c(-1.5, 1.5))+
guides(size = guide_legend(order = 1))+
#edge_width = guide_legend(order = 2),
#edge_color = guide_legend(order = 3)) +
theme(
#legend.title = element_text(size=4,face = "bold"),
legend.title=element_blank(),
legend.text = element_text(size = 5),
legend.position = "bottom",
legend.box="vertical",
legend.margin = margin(0, 0, -0.5, -0.5),
legend.spacing.x = unit(0, "mm"),
legend.spacing.y = unit(0, "mm"))
p3
pdf(file = "location_c3.pdf",   # The directory you want to save the file in
width = 2.5, # The width of the plot in inches
height = 2.5) # The height of the plot in inches
p3
dev.off()
View(summation_c1)
View(summation_c2)
View(summation_c3)
View(summation_c1)
View(summation_c2)
View(summation_c3)
View(vertices_c1)
View(vertices_c2)
View(vertices_c3)
sin(0)
library(Rcpp)
library(devtools)
compileAttributes()
install()
library(graphR)
?graphR_est
document()
?graphR_est
document()
?graphR_est
document()
?graphR_est
document()
?graphR_est
document()
?graphR_est
document()
?graphR_est
document()
document()
?graphR_est
document()
?graphR_est
document()
?graphR_est
library(dplyr)
?filter
?dplyr::filter
document()
?graphR_est
document()
?graphR_est
?predict
document()
?predict
?graphR_est
?graphR_pred
