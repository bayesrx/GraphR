brca_agesi <- brca_agesi %>% mutate(ex = log(mRNAsi/(1-mRNAsi)))
library(dplyr)
brca_agesi <- brca_agesi %>% mutate(ex = log(mRNAsi/(1-mRNAsi)))
brca_agesi$ex <- scale(brca_agesi$ex)
df <- brca_agesi[,c("mRNAsi","ex")]
cs_rna <- left_join(cs_rna,df)
View(cs_rna)
cs_rna$ex <- round(cs_rna$ex, digits = 6)
cs_rna$ex <- round(cs_rna$ex, digits = 6)
df$ex <- round(df$ex, digits = 6)
cs_rna <- left_join(cs_rna,df)
brca_agesi <- read.csv("C:/Users/chenliy/Desktop/PhD/porject I code/application1_brca/res/si/cleandata/data/brca_agesi.csv", header=TRUE)
cs_rna <- read.csv("C:/Users/chenliy/Desktop/PhD/porject I code/application1_brca/res/si/cleandata/res_pathway/cs_rna.csv")
brca_agesi <- brca_agesi %>% mutate(ex = log(mRNAsi/(1-mRNAsi)))
brca_agesi$ex <- scale(brca_agesi$ex)
df <- brca_agesi[,c("mRNAsi","ex")]
cs_rna$ex <- round(cs_rna$ex, digits = 6)
df$ex <- round(df$ex, digits = 6)
cs_rna <- left_join(cs_rna,df)
View(cs_rna)
hr <- cs_rna %>% filter(pathway == "Breast Reactive")
View(hr)
View(cs_rna)
hr <- cs_rna %>% filter(pathway == "Breast reactive")
View(hr)
write.csv(cs_rna,"C:/Users/chenliy/Desktop/PhD/porject I code/application1_brca/res/si/cleandata/res_pathway/cs_rna.csv")
write.csv(cs_rna,"C:/Users/chenliy/Desktop/PhD/porject I code/application1_brca/res/si/cleandata/res_pathway/cs_rna.csv")
log(3)
1/(1+e^(-1.5))
1/(1+exp(-1.5))
#
simulation1 <- function(K, n_k_list, p, Mi, Ui, S_list,
a = 0.01, b = 0.5, poly_degree = 20 # generate base
){
pm1 <- p-1
# 1. Generate lambda_i: K * p=1
lambda_i = matrix(0, nrow = K, ncol = pm1)
for (j in 1:pm1 ){
lambda_i[,j] = mvrnorm(1,Mi[,j], Ui)
}
# 2. Generate delta: K * p-1
delta_i = apply(lambda_i, c(1,2) , function(x) rbinom(1,1,pnorm(x)))
# 3. Generate Gamma
gamma1_1 <- ((S_list[,1]^3+S_list[,2]^3) * delta_i[1,1])
if(length(gamma1_1) == 1) gamma1_1 = matrix(0,nrow = 5000)
gamma1_2 <- exp(S_list[,1]^2+S_list[,2]^2) * delta_i[2,1]
if(length(gamma1_2) == 1) gamma1_2 = matrix(0,nrow = 5000)
gamma2_1 <- log(S_list[,1]^4 + 1) + exp(S_list[,2]) * delta_i[1,2]
if(length(gamma2_1) == 1) gamma2_1 = matrix(0,nrow = 5000)
gamma2_2 <- 3 * delta_i[2,2]
if(length(gamma2_2) == 1) gamma2_2 = matrix(0,nrow = 5000)
gamma3_1 <- 2*S_list[,1]+ 3 *S_list[,2] * delta_i[1,3]
if(length(gamma3_1) == 1) gamma3_1 = matrix(0,nrow = 5000)
gamma3_2 <- as.numeric(S_list[,1]^2+S_list[,2]^2<1.5) * delta_i[2,3]
if(length(gamma3_2) == 1) gamma3_2 = matrix(0,nrow = 5000)
gamma4_1 <- S_list[,1]+S_list[,2] * delta_i[1,4]
if(length(gamma4_1) == 1) gamma4_1 = matrix(0,nrow = 5000)
gamma4_2 <- as.numeric(S_list[,1]^2+S_list[,2]^2<1.5) * delta_i[2,4]
if(length(gamma4_2) == 1) gamma4_2 = matrix(0,nrow = 5000)
gamma5_1 <- 2*tanh(S_list[,1]^2 + atanh(S_list[,2]) ) * delta_i[1,5]
if(length(gamma5_1) == 1) gamma5_1 = matrix(0,nrow = 5000)
gamma5_2 <- S_list[,1]^3+S_list[,2]^3 * delta_i[2,5]
if(length(gamma5_2) == 1) gamma5_2 = matrix(0,nrow = 5000)
gamma1 <- c(gamma1_1, gamma1_2)
gamma2 <- c(gamma2_1, gamma2_2)
gamma3 <- c(gamma3_1, gamma3_2)
gamma4 <- c(gamma4_1, gamma4_2)
gamma5 <- c(gamma5_1, gamma5_2)
gamma <- cbind(gamma1, gamma2, gamma3, gamma4, gamma5)
# gamma52_2 <- 2*abs(S_list[,1]^2+S_list[,2]^3)-2
# gamma54_2 <- S_list[,1]^3+S_list[,2]^3
# gamma61_1 <- 2*tanh(S_list[,2]^2 + atanh(S_list[,1]))
# gamma62_1 <- 0
# gamma63_1 <- 3*tanh(S_list[,1] - S_list[,2]^3)
# gamma64_1 <- 0
# gamma65_1 <- 0
# gamma61_2 <- 0
# gamma62_2 <- 2*abs(S_list[,1]^2+S_list[,2]^3)-2
# gamma63_2 <- 0
# gamma64_2 <- 3*tanh(S_list[,1] - S_list[,2]^3)
# gamma65_2 <- 0
Y_jk <- matrix(nrow = sum(n_k_list), ncol = pm1)
Y_ik <- matrix(0,nrow = sum(n_k_list), ncol = 1)
for (j in 1:pm1){
a1 <- sample(c(0.1,0.3, 0.5))
b1 <- sample(c(0.1,0.3, 0.5))
a2 <- sample(c(0.1,0.3, 0.5))
b2 <- sample(c(0.1,0.3, 0.5))
curve = c(GP.simulate.curve.fast(S_list,a=a1,b=b1,poly_degree=10)$f,
GP.simulate.curve.fast(S_list,a=a2,b=b2,poly_degree=10)$f)
Y_jk[,j] <- curve
Y_ik <- Y_ik + curve * gamma[,j]
}
Y_ik <- Y_ik + rnorm(sum(n_k_list),sd = runif(1, 0.1, 0.3))
output <- list(Y_ik = Y_ik,
Y_jk = Y_jk,
gamma = gamma,
delta_i = delta_i
)
return(output)
}
sim <- simulation1(K, n_k_list, p, Mi, Ui, S_list,a = 0.01, b = 0.5, poly_degree = 5)
sim$delta_i
library(Rcpp)
library(RcppArmadillo)
sourceCpp('sourcecode.cpp')
install.packages("cli")
install.packages("cli")
library(devtools)  # if not installed: install.packages('devtools')
remove.packages("cli")
install.packages("cli")
install.packages("cli")
library(devtools)  # if not installed: install.packages('devtools')
library(remotes)  # if not installed: install.packages('remotes')
38045 * 0.12
27650 * 0.12
(27650 - 11000) * 0.12 + 1100
seq(0.1, 0.9)
seq(0.1, 0.9, by = 0.1)
pnorm(0.8)
## For n=5000
S_list <- GP.generate.grids(d = 2, num_grids = 71, grids_lim=c(-1,1))
##################################################################
###     Data generation code for Directed Graphical Model      ###
##################################################################
#######################
###    libraries    ###
#######################
library(fastBayesReg)
library(BayesGPfit)
library(ggplot2)
library(reshape2)
library(sparsevb)
library(rlist)
library(Matrix)
library(MASS)
library(matrixcalc)
set.seed(100)
### Generating spatial points
#S_list <- GP.generate.grids(d = 2, num_grids = 32, grids_lim=c(-1,1))
#S_list <- S_list[13:1012,]
## For n=5000
S_list <- GP.generate.grids(d = 2, num_grids = 71, grids_lim=c(-1,1))
n=nrow(S_list) #5000
p=6
# beta21 <- S_list[,1]^3+S_list[,2]^3;gamma21=1
#
# beta31 <- exp(S_list[,1]^2+S_list[,2]^2);gamma31=1
# beta32 <- log(S_list[,1]^4 + 1) + exp(S_list[,2]);gamma32=1
#
# beta41 <- 0;gamma41=0
# beta42 <- S_list[,1]+S_list[,2];gamma42=1
# beta43 <- as.numeric(S_list[,1]^2+S_list[,2]^2<1.5);gamma43=1
#
# beta51 <- exp(S_list[,1]) + exp(S_list[,2]^2);gamma51=1
# beta52 <- 0;gamma52=0
# beta53 <- 0;gamma53=0
# beta54 <- S_list[,1]+S_list[,2]^3;gamma54=1
#
# beta61 <- 0;gamma61=0
# beta62 <- exp(S_list[,1]) + exp(S_list[,2]);gamma62=1
# beta63 <- 0;gamma63=0
# beta64 <- exp(cos(S_list[,1] - S_list[,2]));gamma64=1
# beta65 <- 0;gamma65=0
beta21 <- S_list[,1]^3+S_list[,2]^3;gamma21=1
max(abs(beta21))
max(abs(beta21))
max(abs(beta21))
max(abs(beta31))
beta21 <- S_list[,1]^3+S_list[,2]^3;gamma21=1
beta31 <- exp(S_list[,1]^2+S_list[,2]^2);gamma31=1
beta32 <- log(S_list[,1]^4 + 1) + exp(S_list[,2]);gamma32=1
beta41 <- 0;gamma41=0
beta42 <- S_list[,1]+S_list[,2];gamma42=1
beta43 <- as.numeric(S_list[,1]^2+S_list[,2]^2<1.5);gamma43=1
beta51 <- 2*tanh(S_list[,1]^2 + atanh(S_list[,2]) );gamma51=1
beta52 <- 0;gamma52=0
beta53 <- 0;gamma53=0
beta54 <- S_list[,1]^3+S_list[,2]^3;gamma54=1
beta61 <- 0;gamma61=0
beta62 <- 2*abs(S_list[,1]^2+S_list[,2]^3)-2;gamma62=1
beta63 <- 0;gamma63=0
beta64 <- 3*tanh(S_list[,1] - S_list[,2]^3);gamma64=1
beta65 <- 0;gamma65=0
max(abs(beta31))
max(abs(beta41))
max(abs(beta51))
max(abs(beta61))
max(abs(beta62))
max(abs(beta63))
max(abs(beta64))
max(abs(beta65))
max(abs(beta52))
max(abs(beta53))
max(abs(beta54))
max(abs(beta41))
max(abs(beta42))
max(abs(beta43))
max(abs(beta44))
max(abs(beta32))
setwd("C:/Users/chenliy/Dropbox (University of Michigan)/Multisample GraphR/Code/mfvb/cluster_mfvb_priorlambdafixsigma")
library(Rcpp)
library(BayesGPfit)
library(lattice)
library(MASS)
library(dplyr)
# slurm_arrayid <- Sys.getenv('SLURM_ARRAY_TASK_ID')
# seed <- as.numeric(slurm_arrayid)
# set.seed(seed)
# print(seed)
# sparsity_this <- Sys.getenv("sparsity_this")
# sparsity_this <- as.numeric(sparsity_this)
# print(sparsity_this)
# agreement_this <- Sys.getenv("agreement_this")
# agreement_this <- as.numeric(agreement_this)
# print(agreement_this)
# # Simulate curve on d-dimensional Euclidean space
# set.seed(1224)
# dat = list()
# dat$x = GP.generate.grids(d=2,num_grids = 50)
# curve = GP.simulate.curve.fast(dat$x,a=0.01,b=0.5,poly_degree=20L)
# #GP.plot.curve(curve,main="Simulated Curve")
# Psi <- GP.eigen.funcs.fast(dat$x, poly_degree = 20, a = 0.01, b = 0.5)
# lambda <- GP.eigen.value(poly_degree = 20, a = 0.01, b = 0.5, d = ncol(dat$x))
# Bases <- t(Psi)*sqrt(lambda)
# sc1: K = 2, p = 6
K = 2
pminus1 = 5
# create M_i and U_i
location <- read.csv("location.csv")
# 15 gamma function
gamma21 <- function(S_list){
return(S_list[,1]^3+S_list[,2]^3)
}
gamma31 <- function(S_list){
return(exp(S_list[,1]+S_list[,2]))
}
gamma32 <- function(S_list){
return(log(S_list[,1]^4 + 1) + exp(S_list[,2]))
}
gamma41 <- function(S_list){
return(S_list[,1]^2+ log(S_list[,2]^2))
}
gamma42 <- function(S_list){
return(S_list[,1]+S_list[,2])
}
gamma43 <- function(S_list){
return(as.numeric(S_list[,1]^2+S_list[,2]^2<1.5))
}
gamma51 <- function(S_list){
return(2*tanh(S_list[,1]^2 + log(S_list[,2]^2)))
}
gamma52 <- function(S_list){
return(S_list[,1]^3+S_list[,2]^3)
}
gamma53 <- function(S_list){
return(abs(S_list[,1]) + abs(S_list[,2]))
}
gamma54 <- function(S_list){
return(3*tanh(S_list[,1] - S_list[,2]^3))
}
gamma61 <- function(S_list){
return(S_list[,2]+ log(S_list[,1]^2))
}
gamma62 <- function(S_list){
return(as.numeric(abs(S_list[,1])+abs(S_list[,2])<2))
}
gamma63 <- function(S_list){
return(abs(S_list[,1]^3) + abs(S_list[,2]))
}
gamma64 <- function(S_list){
return(tanh(S_list[,2] - S_list[,1]^2))
}
gamma65 <- function(S_list){
return(exp(S_list[,1] - S_list[,2]))
}
simulation3 <- function(location, # generate base
sparsity,
sd_err, agreement){
# get location information for 2 FOVs
fov <- unique(location$fov)
sample_fov <- sample(fov,2)
location1 <- filter(location, fov == sample_fov[1]) %>%
dplyr::select(x,y) %>% as.matrix()
nk1 <- nrow(location1)
location2 <- filter(location, fov == sample_fov[2]) %>%
dplyr::select(x,y) %>% as.matrix()
nk2 <- nrow(location2)
# when p = 6 ==> 15 parameters to be simulated
# Suppose half of the edges are shared and rest are sample specific
n_edge_fov1 <- round(15 * sparsity)
n_edge_fov2 <- ceiling(15 * sparsity)
n_shared_edge <- ceiling(n_edge_fov2 * agreement)
if (n_shared_edge ==1){
shared_edge_selected <- sample(c(11:15),1)
} else if(n_shared_edge > 1){
shared_edge_selected <- sample(c(11:15),1)
shared_edge_selected <- c(shared_edge_selected,
sample(setdiff(c(1:15),shared_edge_selected), n_shared_edge-1))
} else{
shared_edge_selected <- NULL
}
if (n_edge_fov1-n_shared_edge != 0){
fov1_selected <- sample(setdiff(c(1:15), shared_edge_selected),n_edge_fov1-n_shared_edge)
} else{
fov1_selected <- NULL
}
if (n_edge_fov2-n_shared_edge != 0){
fov2_selected <- sample(setdiff(c(1:15), c(shared_edge_selected,fov1_selected)),
n_edge_fov2-n_shared_edge)
} else{
fov2_selected <- NULL
}
delta <- matrix(0, nrow = 15, ncol = 2)
delta[c(shared_edge_selected, fov1_selected),1] <- 1
delta[c(shared_edge_selected, fov2_selected),2] <- 1
# now just assume the function of gamma are same for sample 1 and 2.
y1_1 <- rnorm(nk1, sd = sd_err)
y1_2 <- rnorm(nk2, sd = sd_err)
y2_1 <- gamma21(location1) * y1_1 * delta[1,1] + rnorm(nk1, sd = sd_err)
y2_2 <- gamma21(location2) * y1_2 * delta[1,2] + rnorm(nk2, sd = sd_err)
y3_1 <- gamma31(location1) * y1_1 * delta[2,1] +
gamma32(location1) * y2_1 * delta[3,1] +
rnorm(nk1, sd = sd_err)
y3_2 <- gamma31(location2) * y1_2 * delta[2,2] +
gamma32(location2) * y2_2 * delta[3,2] +
rnorm(nk2, sd = sd_err)
y4_1 <- gamma41(location1) * y1_1 * delta[4,1] +
gamma42(location1) * y2_1 * delta[5,1] +
gamma43(location1) * y3_1 * delta[6,1] +
rnorm(nk1, sd = sd_err)
y4_2 <- gamma41(location2) * y1_2 * delta[4,2] +
gamma42(location2) * y2_2 * delta[5,2] +
gamma43(location2) * y3_2 * delta[6,2] +
rnorm(nk2, sd = sd_err)
y5_1 <- gamma51(location1) * y1_1 * delta[7,1] +
gamma52(location1) * y2_1 * delta[8,1] +
gamma53(location1) * y3_1 * delta[9,1] +
gamma54(location1) * y4_1 * delta[10,1] +
rnorm(nk1, sd = sd_err)
y5_2 <- gamma51(location2) * y1_2 * delta[7,2] +
gamma52(location2) * y2_2 * delta[8,2] +
gamma53(location2) * y3_2 * delta[9,2] +
gamma54(location2) * y4_2 * delta[10,2] +
rnorm(nk2, sd = sd_err)
y6_1 <- gamma61(location1) * y1_1 * delta[11,1] +
gamma62(location1) * y2_1 * delta[12,1] +
gamma63(location1) * y3_1 * delta[13,1] +
gamma64(location1) * y4_1 * delta[14,1] +
gamma65(location1) * y5_1 * delta[15,1] +
rnorm(nk1, sd = sd_err)
y6_2 <- gamma61(location2) * y1_2 * delta[11,2] +
gamma62(location2) * y2_2 * delta[12,2] +
gamma63(location2) * y3_2 * delta[13,2] +
gamma64(location2) * y4_2 * delta[14,2] +
gamma65(location2) * y5_2 * delta[15,2] +
rnorm(nk2, sd = sd_err)
y_1 <- cbind(y1_1, y2_1, y3_1, y4_1, y5_1, y6_1)
y_2 <- cbind(y1_2, y2_2, y3_2, y4_2, y5_2, y6_2)
y <- rbind(y_1, y_2)
location <- rbind(location1, location2)
n_k_list <- c(nk1, nk2)
return(list(y=y,
location = location,
n_k_list = n_k_list,
delta = delta))
}
############################################################################
source("wrap_function.R")
Rcpp::sourceCpp("sourcecode.cpp")
Rcpp::sourceCpp("sourcecode.cpp")
Rcpp::sourceCpp("sourcecode.cpp")
################################################################################
# Simulation function
################################################################################
simulation_grid <- function(sparsity, n_sample, sd_err, agreement, p,
gamma_fcn_list,
same_gamma_fcn = TRUE,
est_method = c("one_regression","multiple_regressions"),
std_method = c("original","scale","sqrt_norm")){
# create location information and different normalization methods
S_list1_ori <- GP.generate.grids(d = 2, num_grids = sqrt(n_sample), grids_lim=c(-1,1))
S_list2_ori <- GP.generate.grids(d = 2, num_grids = sqrt(n_sample), grids_lim=c(3,5))
if (std_method == "original"){
S_list1 <- S_list1_ori
S_list2 <- S_list2_ori
} else if (std_method == "scale"){
S_list1 <- apply(S_list1_ori,2, scale)
S_list2 <- apply(S_list2_ori,2, scale)
} else if (std_method == "sqrt_norm"){
S_list1_norm <- apply(S_list1_ori,1,function(x) sqrt(sum(x^2)))
S_list2_norm <- apply(S_list2_ori,1,function(x) sqrt(sum(x^2)))
S_list1 <- S_list1_ori/S_list1_norm
S_list2 <- S_list2_ori/S_list2_norm
}
S_list <- list(S_list1,S_list2)
# number of edges
n_edge <- round((p-1)*p * sparsity)
n_shared_edge <- round(n_edge * agreement/2)
n_specific_edge <- n_edge - 2*n_shared_edge
n_edge1 <- sample(c(round(n_specific_edge/4):round(n_specific_edge/4*3)),1)
n_edge2 <- n_specific_edge - n_edge1
#
total_parameters = (p-1)*p/2
delta1 = delta2 = rep(0, total_parameters)
if (est_method == "one_regression"){
delta_sele_shared_one_reg <- sample(c((total_parameters - p + 2):total_parameters), 1)
delta_sele_shared <- c(delta_sele_shared_one_reg,
sample(setdiff(1:total_parameters, delta_sele_shared_one_reg),
n_shared_edge-1))
} else if(est_method == "multiple_regressions"){
delta_sele_shared <- sample(1:total_parameters, n_shared_edge)
}
delta_sele_specific1 <- sample(setdiff(c(1:total_parameters), delta_sele_shared),
n_edge1)
delta_sele_specific2 <- sample(setdiff(c(1:total_parameters),
c(delta_sele_shared,delta_sele_specific1)),
n_edge2)
delta1[c(delta_sele_shared, delta_sele_specific1)] <- 1
delta2[c(delta_sele_shared, delta_sele_specific2)] <- 1
delta <- cbind(delta1, delta2)
delta1_ind <- sort(c(delta_sele_shared, delta_sele_specific1))
delta2_ind <- sort(c(delta_sele_shared, delta_sele_specific2))
# gamma_fcn_ind
gamma_fcn_ind <- matrix(sample(1:100, total_parameters*2, replace = TRUE), ncol = 2) *
delta
if (same_gamma_fcn){
gamma_fcn_ind[delta_sele_shared,1] = gamma_fcn_ind[delta_sele_shared,2]
}
# Generate Y
Y_all <- vector("list",2)
for (k in 1:2){
Y_tmp <- matrix(rnorm(n_sample * p, sd = sd_err), nrow = n_sample, ncol = p)
for (p_this in 2:p){
#p_this = 6
para_max <- (p_this-1)*p_this/2
para_min <- para_max - p_this+2
para_range <- c(para_min:para_max)
delta_p <- delta[para_range,k]
delta_p_ind = which(delta_p == 1)
if (length(delta_p_ind) != 0){
#delta_p_ind_this <- 2
for (delta_p_ind_this in delta_p_ind){
delta_p_ind_global_this <- para_min + delta_p_ind_this - 1
gamma_this <- gamma_function_list[[gamma_fcn_ind[delta_p_ind_global_this,k]]](S_list[[k]])
Y_tmp[,p_this] <- Y_tmp[,p_this] + Y_tmp[,delta_p_ind_this] * gamma_this
}
}
}
Y_all[[k]] <- Y_tmp
}
return(list(Y_all = do.call(rbind, Y_all),
delta = delta,
gamma_fcn_ind = gamma_fcn_ind,
location = do.call(rbind,S_list),
location_ori = rbind(S_list1_ori, S_list2_ori)))
}
####################################################################
# for (sd_err_this in c(0.1,1)){
#   for (sparsity = c(0.2, 0.4)){
#
#   }
# }
set.seed(3)
df <- simulation_grid(
sparsity = 0.05,
n_sample = 4900,
sd_err = 0.01,
agreement = 0.5,
p = 40,
gamma_fcn_list,
same_gamma_fcn = FALSE,
est_method = "one_regression",
std_method = "sqrt_norm"
)
library(Rcpp)
library(BayesGPfit)
library(lattice)
library(MASS)
library(dplyr)
library(ggplot2)
####################################################################
# for (sd_err_this in c(0.1,1)){
#   for (sparsity = c(0.2, 0.4)){
#
#   }
# }
set.seed(3)
df <- simulation_grid(
sparsity = 0.05,
n_sample = 4900,
sd_err = 0.01,
agreement = 0.5,
p = 40,
gamma_fcn_list,
same_gamma_fcn = FALSE,
est_method = "one_regression",
std_method = "sqrt_norm"
)
source("function_list2.R")
df <- simulation_grid(
sparsity = 0.05,
n_sample = 4900,
sd_err = 0.01,
agreement = 0.5,
p = 40,
gamma_fcn_list,
same_gamma_fcn = FALSE,
est_method = "one_regression",
std_method = "sqrt_norm"
)
setwd("~/GitHub/GraphR")
